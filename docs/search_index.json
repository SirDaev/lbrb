[["calculating-genetic-distances-between-sequences.html", "Chapter 24 Calculating genetic distances between sequences 24.1 Preliminaries 24.2 Introduction 24.3 Calculating genetic distances between DNA/mRNA sequences 24.4 Calculationg genetic distance", " Chapter 24 Calculating genetic distances between sequences By: Nathan Brouwer, with some content adapted Coghlan (2011) Multiple Alignment and Phylogenetic trees and under the Creative Commons 3.0 Attribution License (CC BY 3.0). Functions print_msa() and clean_alignment() adapted from (Coglan 2011). 24.1 Preliminaries eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJsaWJyYXJ5KGNvbXBiaW80YWxsKVxubGlicmFyeShtc2EpXG5saWJyYXJ5KHNlcWlucilcbmxpYnJhcnkoYXBlKSJ9 24.2 Introduction A common first step in performing a phylogenetic analysis is to calculate the pairwise genetic distances between sequences. The genetic distance is an estimate of the evolutionary divergence between two sequences, and is usually measured in quantity of evolutionary change, e.g., an estimate of the number of mutations that have occurred since the two sequences shared a common ancestor. We can calculate the genetic distances between protein sequences using the dist.alignment() function in the seqinr package. The dist.alignment() function takes a multiple sequence alignment (MSA) as input. Based on the MSA that you give it, dist.alignment() calculates the genetic distance between each pair of proteins in the multiple alignment, yielding pairwise distances. For example, to calculate genetic distances between the virus phosphoproteins based on the multiple sequence alignment stored in virusaln, we type: eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJkYXRhKHZpcnVzYWxuKVxudmlydXNkaXN0IDwtIHNlcWlucjo6ZGlzdC5hbGlnbm1lbnQodmlydXNhbG5fc2VxaW5yKSAgIyBDYWxjdWxhdGUgdGhlIGdlbmV0aWMgZGlzdGFuY2VzXG5cbnZpcnVzZGlzdCAjIFByaW50IG91dCB0aGUgZ2VuZXRpYyBkaXN0YW5jZSBtYXRyaXgifQ== NOTE My result are different from the original results, shown here: I need to check the settings used for the MSA P0C569 O56773 P06747 O56773 0.4142670 P06747 0.4678196 0.4714045 Q5VKP1 0.4828127 0.5067117 0.5034130 The genetic distance matrix above shows the genetic distance between each pair of proteins. The sequences are referred to by their UniProt accessions. Recall that P06747 = rabies virus phosphoprotein P0C569 is Mokola virus phosphoprotein O56773 is Lagos bat virus phosphoprotein Q5VKP1 is Western Caucasian bat virus phosphoprotein. Based on the genetic distance matrix above, we can see that the genetic distance between Lagos bat virus phosphoprotein (O56773) and Mokola virus phosphoprotein (P0C569) is smallest (about 0.414). Similarly, the genetic distance between Western Caucasian bat virus phosphoprotein (Q5VKP1) and Lagos bat virus phosphoprotein (O56773) is the biggest (about 0.507). The larger the genetic distance between two sequences, the more amino acid changes (such as change from Asp to Met) or indels that have occurred since they shared a common ancestor, and the longer ago their common ancestor probably lived. (The relationship between number of mutations and time, however, depends on the mutation rate and generation time of the organism). 24.3 Calculating genetic distances between DNA/mRNA sequences Just like for protein sequences, you can calculate genetic distances between DNA (or mRNA) sequences based on an alignment of the sequences. The RefSeq DNA accession numbers for the proteins we’ve been using are: AF049118 = mRNA sequence for Mokola virus phosphoprotein, AF049114 = mRNA sequence for Mokola virus phosphoprotein, AF049119 = mRNA sequence for Lagos bat virus phosphoprotein, AF049115 = mRNA sequence for Duvenhage virus phosphoprotein. We can retrieve these DNA sequences using entrez_fetch_list(). Some notes about how we’ll use this function works: db is short for “database” the database is called nuccore (not genebank or gene) the argument rettype is “tt”; I think it stands for “REtURN type” (I also forget the second “t”) eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIjIHB1dCBhY2Nlc3Npb25zIGluIHZlY3RvclxuYWNjZXNzaW9uc19tcm5hIDwtIGMoXCJBRjA0OTExOFwiLFwiQUYwNDkxMTRcIixcIkFGMDQ5MTE5XCIsXCJBRjA0OTExNVwiKVxuXG4jIGdldCBzZXF1ZW5jZXNcbnZpcnVzX21ybmFfbGlzdCA8LSBlbnRyZXpfZmV0Y2hfbGlzdChkYiA9IFwibnVjY29yZVwiLCAgIyBcIm51Y2NvcmVcIiBkYiBmb3IgRE5BIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9IGFjY2Vzc2lvbnNfbXJuYSwgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHR5cGUgPSBcIkZBU1RBXCIpICMgcmV0dHlwZSBoYXMgdHdvIHQifQ== We can clean these three sequences using a simple for() loop. We set parse = F so we get things back as single character string. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJmb3IoaSBpbiAxOmxlbmd0aCh2aXJ1c19tcm5hX2xpc3QpKXtcbiAgdmlydXNfbXJuYV9saXN0W1tpXV0gPC0gZmFzdGFfY2xlYW5lcih2aXJ1c19tcm5hX2xpc3RbaV0sIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyc2UgPSBGKVxufSJ9 Now we need to convert each of these into a named vector of sequences. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJtcmFfc2VxX3ZlY3RvciA8LSBjKEFGMDQ5MTE4ID0gIHZpcnVzX21ybmFfbGlzdFtbMV1dICxcbiAgICAgICAgICAgICAgICAgQUYwNDkxMTQgPSB2aXJ1c19tcm5hX2xpc3RbWzJdXSAsXG4gICAgICAgICAgICAgICAgIEFGMDQ5MTE5ID0gdmlydXNfbXJuYV9saXN0W1szXV0gLFxuICAgICAgICAgICAgICAgICBBRjA0OTExNSA9IHZpcnVzX21ybmFfbGlzdFtbNF1dKSJ9 Finally convert this to a “stringset” using Biostrings::DNAStringSet(). eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJkbmFfc2VxX3N0cmluZ3NldCA8LSBCaW9zdHJpbmdzOjpETkFTdHJpbmdTZXQobXJhX3NlcV92ZWN0b3IpIn0= Let’s see what we got eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJkbmFfc2VxX3N0cmluZ3NldCJ9 Now we can make an alignment use msa(). eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJ2aXJ1c19tcm5hX2FsbiA8LSBtc2EoaW5wdXRTZXFzID0gZG5hX3NlcV9zdHJpbmdzZXQsXG4gICAgICAgICAgICAgICAgICAgICBtZXRob2QgPSBcIkNsdXN0YWxXXCIpIn0= The output looks like this eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJ2aXJ1c19tcm5hX2FsbiJ9 This looks a LOT different than an amino acid alignment, which looked like this: eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJkYXRhKHZpcnVzYWxuKVxudmlydXNhbG4ifQ== Why might the be different? First, examine the output above and determine how long the DNA alignment is versus the amino acid alignment? Why are they different, and why is one longer than the other? The DNA alignment is 1097 columns, while the amino acid alignment is only 306 rows. Note that 306*3 = 918. 1097 is pretty close to 1097. What’s the relevance of multiplying by 3? 24.4 Calculationg genetic distance You can calculate a genetic distance for DNA or mRNA sequences using the dist.dna() function in the ape package. dist.dna() takes a MSA of DNA or mRNA sequences as its input, and calculates the genetic distance between each pair of DNA sequences in the multiple alignment. The dist.dna() function requires the input alignment to be in a special format known as DNAbin format, so we must use the as.DNAbin() function to convert our DNA alignment into this format before using the dist.dna() function. eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIgIyBDb252ZXJ0IHRoZSBhbGlnbm1lbnQgdG8gXCJETkFiaW5cIiBmb3JtYXRcbnZpcnVzX21ybmFfYWxuX2JpbiA8LSBhcGU6OmFzLkROQWJpbih2aXJ1c19tcm5hX2FsbikifQ== The output of as.DNAbin() gives us a short summery of the alignment eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiJ2aXJ1c19tcm5hX2Fsbl9iaW4ifQ== Now to make and view the alignment: eyJsYW5ndWFnZSI6InIiLCJzYW1wbGUiOiIgIyBDYWxjdWxhdGUgdGhlIGdlbmV0aWMgZGlzdGFuY2UgbWF0cml4XG52aXJ1c19tcm5hX2Rpc3QgPC0gYXBlOjpkaXN0LmRuYSh2aXJ1c19tcm5hX2Fsbl9iaW4pXG5cbiAjIFByaW50IG91dCB0aGUgZ2VuZXRpYyBkaXN0YW5jZSBtYXRyaXhcbnZpcnVzX21ybmFfZGlzdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIn0= NOTE: my results for this alignment are the same as the original by Coghlan. I’m not sure why my amino acid alignment produces divergent results but the DNA is the same. "]]
