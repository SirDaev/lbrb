[["index.html", "A Little Book of R for Bioinformatics 2.0 Preface to version 2.0", " A Little Book of R for Bioinformatics 2.0 Avirl Coghlan, with contributions by Nathan L. Brouwer 2021-07-12 Preface to version 2.0 Welcome to A Little Book of R for Bioinformatics 2.0!. This book is based on the original A Little Book of R for Bioinformatics by Dr. Avril Coghlan (Hereafter “ALBRB 1.0”). Dr. Coghlan’s book was one of the first and most thorough introductions to using R for bioinformatics, and was generously published under the Creative Commons 3.0 Attribution License (CC BY 3.0). In addition to describing how to do bioinformatics in R, Coghlan provided numerous functions to facilitate important tasks, practice questions, and references to further reading. ALBRB 1.0 was extremely useful to me when I was learning bioinformatics and computational biology. In this version of the book, which I’ll refer to as ALBRB 2.0, I have adapted Dr. Coghlan’s original book to suit my own teaching needs. Below I’ve outlined the general types of changes I’ve made to the original book. I have tried to link back to the original content that these updates are derived from and note how changes were made. Any errors or inconsistencies should be ascribed to me, not Dr. Coghlan. If you have any feedback, please email me at brouwern@gmail.com Nathan Brouwer, June 2021 Changes implemented in ALBRB 2.0 by Nathan Brouwer Converted the entire book to RMarkdown and published it via bookdown. Added instructions for using RStudio and RStudio Cloud. Updated instructions to reflect any changes in software, including changes to how the bioinformatics repository Bioconductor now works. Split up chapters into smaller units. Reorganized the order of some material. Added links to the book I am developing, Computational Biology for All. Moved most functions and datasets to my teaching package compbio4all. Changed some plotting to ggplot2 or ggpubr. Added additional subheadings Added vocab and function lists to the beginning of many chapters At times replaced non-biological examples with biological ones. Change from British to American English (Sorry!Couldn’t help myself.) Provided additional links to external resources. Added use or rentrez for querying NCBI databases "],["downloading-r.html", "Chapter 1 Downloading R 1.1 Preface 1.2 Introduction to R 1.3 Installing R 1.4 Starting R", " Chapter 1 Downloading R By: Avril Coghlan Adapted, edited and expanded: Nathan Brouwer (brouwern@gmail.com) under the Creative Commons 3.0 Attribution License (CC BY 3.0). 1.1 Preface The following introduction to R is based on the first part of “How to install R and a Brief Introduction to R” by Avril Coghlan, which was released under the Creative Commons 3.0 Attribution License (CC BY 3.0). For additional information see the Appendices and “Getting R onto your computer”. 1.2 Introduction to R R (www.r-project.org) is a commonly used free statistics software. R allows you to carry out statistical analyses in an interactive mode, as well as allowing programming. 1.3 Installing R To use R, you first need to install the R program on your computer. 1.3.1 Installing R on a Windows PC These instructions will focus on installing R on a Windows PC. However, I will also briefly mention how to install R on a Macintosh or Linux computer (see below). These steps have not been checked as of 8/13/2019 so there may be small variations in what the prompts are. Installing R, however, is basically that same as any other program. Clicking “Yes” etc on everything should work. PROTIP: Even if you have used R before its good to regularly update it to avoid conflicts with recently produced software. Minor updates of R are made very regularly (approximately every 6 months), as R is actively being improved all the time. It is worthwhile installing new versions of R a couple times a year, to make sure that you have a recent version of R (to ensure compatibility with all the latest versions of the R packages that you have downloaded). To install R on your Windows computer, follow these steps: Go to https://cran.r-project.org/ Under “Download and Install R,” click on the “Windows” link. Under “Subdirectories,” click on the “base” link. On the next page, you should see a link saying something like “Download R 4.1.0 for Windows” (or R X.X.X, where X.X.X gives the version of the program). Click on this link. You may be asked if you want to save or run a file “R-x.x.x-win32.exe.” Choose “Save” and save the file. Then double-click on the icon for the file to run it. You will be asked what language to install it in. The R Setup Wizard will appear in a window. Click “Next” at the bottom of the R Setup wizard window. The next page says “Information” at the top. Click “Next” again. The next page says “Select Destination Location” at the top. By default, it will suggest to install R on the C drive in the “Program Files” directory on your computer. Click “Next” at the bottom of the R Setup wizard window. The next page says “Select components” at the top. Click “Next” again. The next page says “Startup options” at the top. Click “Next” again. The next page says “Select start menu folder” at the top. Click “Next” again. The next page says “Select additional tasks” at the top. Click “Next” again. R should now be installing. This will take about a minute. When R has finished, you will see “Completing the R for Windows Setup Wizard” appear. Click “Finish.” To start R, you can do one of the following steps: Check if there is an “R” icon on the desktop of the computer that you are using. If so, double-click on the “R” icon to start R. If you cannot find an “R” icon, try the next step instead. Click on the “Start” button at the bottom left of your computer screen, and then choose “All programs,” and start R by selecting “R” (or R X.X.X, where X.X.X gives the version of R) from the menu of programs. The R console (a rectangle) should pop up: 1.3.2 How to install R on non-Windows computers (eg. Macintosh or Linux computers) These steps have not been checked as of 8/13/2019 so there may be small variations in what the prompts are. Installing R, however, is basically that same as any other program. Clicking “Yes” etc on everything should work. The instructions above are for installing R on a Windows PC. If you want to install R on a computer that has a non-Windows operating system (for example, a Macintosh or computer running Linux, you should download the appropriate R installer for that operating system at https://cran.r-project.org/ and follow the R installation instructions for the appropriate operating system at https://cran.r-project.org/doc/FAQ/R-FAQ.html#How-can-R-be-installed_003f . 1.4 Starting R To start R, Check if there is an R icon on the desktop of the computer that you are using. If so, double-click on the R icon to start R. If you cannot find an R icon, try the next step instead. You can also start R from the Start menu in Windows. Click on the “Start” button at the bottom left of your computer screen, and then choose “All programs,” and start R by selecting “R” (or R X.X.X, where X.X.X gives the version of R, e.g.. R 2.10.0) from the menu of programs. Say “Hi” to R and take a quick look at how it looks. Now say “Goodbye,” because we will never actually do any work in this version of R; instead, we’ll use the RStudio IDE (integrated development environment). "],["installing-the-rstudio-ide.html", "Chapter 2 Installing the RStudio IDE 2.1 Getting to know RStudio 2.2 RStudio versus RStudio Cloud", " Chapter 2 Installing the RStudio IDE By: Nathan Brouwer The name “R” refers both to the programming language and the program that runs that language. When you download itR* there is also a basic GUI (graphical user interface) that you can access via the R icon. Other GUIs are available, and the most popular currently is RStudio. RStudio a for-profit company that is a main driver of development of R. Much of what they produce has free basic versions or is entirely free. They produce software (RStudio), cloud-based applications (RStudio Cloud), and web server infrastructure for business applications of R. A brief overview of installing RStudio can be found here “Getting RStudio on to your computer” 2.1 Getting to know RStudio For a brief overview of RStudio see “Getting started with RStudio” A good overview of what the different parts of RStudio can be seen in the image in this tweet: https://twitter.com/RLadiesNCL/status/1138812826917724160?s=20 2.2 RStudio versus RStudio Cloud RStudio and RStudio cloud work almost identically, so anything you read about RStudio will apply to RStudio Cloud. RStudio is easy to download an use, but RStudio Cloud eliminates even the minor hiccups that occur. Free accounts with RStudio Cloud allow up to 15 hours per month, which is enough for you to get a taste for using R. "],["installing-r-packages.html", "Chapter 3 Installing R packages 3.1 Downloading packages with the RStudio IDE 3.2 Downloading packages with the function install.packages() 3.3 Using packages after they are downloaded", " Chapter 3 Installing R packages By: Avril Coghlan. Adapted, edited and expanded: Nathan Brouwer under the Creative Commons 3.0 Attribution License (CC BY 3.0). R is a programming language, and packages (aka libraries) are bundles of software built using R. Most sessions using R involve using additional R packages. This is especially true for bioinformatics and computational biology. NOTE: If you are working in an RStudio Cloud environment organized by someone else (e.g. a course instructor), they likely are taking care of many of the package management issues. The following information is still useful to be familiar with. 3.1 Downloading packages with the RStudio IDE There is a point-and-click interface for installing R packages in RStudio. There is a brief introduction to downloading packages on this site: http://web.cs.ucla.edu/~gulzar/rstudio/ I’ve summarized it here: “Click on the”Packages\" tab in the bottom-right section and then click on “Install.” The following dialog box will appear. In the “Install Packages” dialog, write the package name you want to install under the Packages field and then click install. This will install the package you searched for or give you a list of matching package based on your package text. 3.2 Downloading packages with the function install.packages() The easiest way to install a package if you know its name is to use the R function install.packages()`. Note that it might be better to call this “download.packages” since after you install it, you also have to load it! Frequently I will include install.packages(...) at the beginning of a chapter the first time we use a package to make sure the package is downloaded. Note, however, that if you already have downloaded the package, running install.packages(...) will download a new copy. While packages do get updated from time to time, but its best to re-run install.packages(...) only occassionaly. We’ll download a package used for plotting called ggplot2, which stands for “Grammar of Graphics.” ggplot2 was developed by Dr. Hadley Wickham, who is now the Chief Scientists for RStudio. To download ggplot2, run the following command: install.packages(&quot;ggplot2&quot;) # note the &quot; &quot; Often when you download a package you’ll see a fair bit of angry-looking red text, and sometime other things will pop up. Usually there’s nothing of interest here, but sometimes you need to read things carefully over it for hints about why something didn’t work. 3.3 Using packages after they are downloaded To actually make the functions in package accessible you need to use the library() command. Note that this is not in quotes. library(ggplot2) # note: NO &quot; &quot; "],["installing-bioconductor.html", "Chapter 4 Installing Bioconductor 4.1 Bioconductor 4.2 Installing BiocManager 4.3 The ins and outs of package installation 4.4 Actually loading a package", " Chapter 4 Installing Bioconductor By: Avril Coghlan. Adapted, edited and expanded: Nathan Brouwer under the Creative Commons 3.0 Attribution License (CC BY 3.0), including details on install Bioconductor and common prompts and error messages that appear during installation. 4.1 Bioconductor R packages (aka “libraries”) can live in many places. Most are accessed via CRAN, the Comprehensive R Archive Network. The bioinformatics and computational biology community also has its own package hosting system called Bioconductor. R has played an important part in the development and application of bioinformatics techniques in the 21th century. Bioconductor 1.0 was released in 2002 with 15 packages. As of winter 2021, there are almost 2000 packages in the current release! NOTE: If you are working in an RStudio Cloud environment organized by someone else (eg a course instructor), they likely are taking care of most of package management issues, inlcuding setting up Bioconductor. The following information is still useful to be familiar with. To interface with Bioconductor you need the BiocManager package. The Bioconductor people have put BiocManager on CRAN to allow you to set up interactions with Bioconductor. See the BiocManager documentation for more information (https://cran.r-project.org/web/packages/BiocManager/vignettes/BiocManager.html). Note that if you have an old version of R you will need to update it to interact with Bioconductor. 4.2 Installing BiocManager BiocManager can be installed using the install.packages() packages command. install.packages(&quot;BiocManager&quot;) # Remember the &quot; &quot;; don&#39;t worry about the red text Once downloaded, BioManager needs to be explicitly loaded into your active R session using library() library(BiocManager) # no quotes; again, ignore the red text Individual Bioconductor packages can then be downloaded using the install() command. An essential packages is Biostrings. To do this , BiocManager::install(&quot;Biostrings&quot;) 4.3 The ins and outs of package installation IMPORANT Bioconductor has many dependencies - other packages which is relies on. When you install Bioconductor packages you may need to update these packages. If something seems to not be working during this process, restart R and begin the Bioconductor installation process until things seem to work. Below I discuss the series of prompts I had to deal with while re-installing Biostrings while editing this chapter. 4.3.1 Updating other packages when downloading a package When I re-installed Biostrings while writing this I was given a HUGE blog of red test that contained this: &#39;getOption(&quot;repos&quot;)&#39; replaces Bioconductor standard repositories, see &#39;?repositories&#39; for details replacement repositories: CRAN: https://cran.rstudio.com/ Bioconductor version 3.11 (BiocManager 1.30.16), R 4.0.5 (2021-03-31) Old packages: &#39;ade4&#39;, &#39;ape&#39;, &#39;aster&#39;, &#39;bayestestR&#39;, &#39;bio3d&#39;, &#39;bitops&#39;, &#39;blogdown&#39;, &#39;bookdown&#39;, &#39;brio&#39;, &#39;broom&#39;, &#39;broom.mixed&#39;, &#39;broomExtra&#39;, &#39;bslib&#39;, &#39;cachem&#39;, &#39;callr&#39;, &#39;car&#39;, &#39;circlize&#39;, &#39;class&#39;, &#39;cli&#39;, &#39;cluster&#39;, &#39;colorspace&#39;, &#39;corrplot&#39;, &#39;cpp11&#39;, &#39;curl&#39;, &#39;devtools&#39;, &#39;DHARMa&#39;, &#39;doBy&#39;, &#39;dplyr&#39;, &#39;DT&#39;, &#39;e1071&#39;, &#39;ellipsis&#39;, &#39;emmeans&#39;, &#39;emojifont&#39;, &#39;extRemes&#39;, &#39;fansi&#39;, &#39;flextable&#39;, &#39;forecast&#39;, &#39;formatR&#39;, &#39;gap&#39;, &#39;gargle&#39;, &#39;gert&#39;, &#39;GGally&#39;, &#39;ggfortify&#39;, &#39;ggplot2&#39;, &#39;ggsignif&#39;, &#39;ggVennDiagram&#39;, &#39;gh&#39;, &#39;glmmTMB&#39;, &#39;googledrive&#39;, &#39;gtools&#39;, &#39;haven&#39;, &#39;highr&#39;, &#39;hms&#39;, &#39;htmlTable&#39;, &#39;httpuv&#39;, &#39;huxtable&#39;, &#39;jquerylib&#39;, &#39;KernSmooth&#39;, &#39;knitr&#39;, &#39;later&#39;, &#39;lattice&#39;, &#39;lme4&#39;, &#39;magick&#39;, &#39;manipulateWidget&#39;, &#39;MASS&#39;, &#39;Matrix&#39;, &#39;matrixcalc&#39;, &#39;matrixStats&#39;, &#39;mgcv&#39;, &#39;mime&#39;, &#39;multcomp&#39;, &#39;mvtnorm&#39;, &#39;nnet&#39;, &#39;openssl&#39;, &#39;openxlsx&#39;, &#39;parameters&#39;, &#39;pBrackets&#39;, &#39;pdftools&#39;, &#39;phangorn&#39;, &#39;phytools&#39;, &#39;pillar&#39;, &#39;plotly&#39;, &#39;processx&#39;, &#39;proxy&#39;, &#39;qgam&#39;, &#39;quantreg&#39;, &#39;ragg&#39;, &#39;Rcpp&#39;, &#39;RcppArmadillo&#39;, &#39;remotes&#39;, &#39;rgl&#39;, &#39;rio&#39;, &#39;rJava&#39;, &#39;rlang&#39;, &#39;rmarkdown&#39;, &#39;robustbase&#39;, &#39;rsconnect&#39;, &#39;rversions&#39;, &#39;sandwich&#39;, &#39;sass&#39;, &#39;segmented&#39;, &#39;seqinr&#39;, &#39;seqmagick&#39;, &#39;servr&#39;, &#39;sf&#39;, &#39;shape&#39;, &#39;spatial&#39;, &#39;statmod&#39;, &#39;stringi&#39;, &#39;systemfonts&#39;, &#39;testthat&#39;, &#39;textshaping&#39;, &#39;tibble&#39;, &#39;tidyselect&#39;, &#39;tidytree&#39;, &#39;tinytex&#39;, &#39;tufte&#39;, &#39;UniprotR&#39;, &#39;units&#39;, &#39;vctrs&#39;, &#39;viridis&#39;, &#39;viridisLite&#39;, &#39;withr&#39;, &#39;xfun&#39;, &#39;zip&#39; Hidden at the bottom was a prompt: “Update all/some/none? [a/s/n]:” Its a little vague, but what it wants me to do is type in a, s or n and press enter to tell it what to do. I almost always chose “a,” though this may take a while to update everything. 4.3.2 Packages “from source” You are likely to get lots of random-looking feedback from R when doing Bioconductor-related installations. Look carefully for any prompts as the very last line. While updating Biostrings I was told: “There are binary versions available but the source versions are later:” and given a table of packages. I was then asked “Do you want to install from sources the packages which need compilation? (Yes/no/cancel)” I almost always chose “no.” 4.3.3 More on angry red text After the prompt about packages from source, R proceeded to download a lot of updates to packages, which took a few minutes. Lots of red text scrolled by, but this is normal. 4.4 Actually loading a package Again, to actually load the Biostrings package into your active R sessions requires the libary() command: library(Biostrings) As you might expect, there’s more red text scrolling up my screen! I can tell that is actually worked because at the end of all the red stuff is the R prompt of “&gt;” and my cursor. "],["a-brief-introduction-to-r.html", "Chapter 5 A Brief introduction to R 5.1 Vocabulary 5.2 R functions 5.3 Interacting with R 5.4 Variables in R 5.5 Arguments 5.6 Help files with help() and ? 5.7 Searching for functions with help.search() and RSiteSearch() 5.8 More on functions 5.9 Quiting R 5.10 Links and Further Reading", " Chapter 5 A Brief introduction to R By: Avril Coghlan. Adapted, edited and expanded: Nathan Brouwer under the Creative Commons 3.0 Attribution License (CC BY 3.0). This chapter provides a brief introduction to R. At the end of are links to additional resources for getting started with R. 5.1 Vocabulary scalar vector list class numeric character assignment elements of an object indices attributes of an object argument of a function 5.2 R functions &lt;- [ ] $ table() function c() log10() help(), ? help.search() RSiteSearch() mean() return() q() 5.3 Interacting with R You will type R commands into the RStudio console in order to carry out analyses in R. In the RStudio console you will see the R prompt starting with the symbol “&gt;.” “&gt;” will always be there at the beginning of each new command - don’t try to delete it! Moreover, you never need to type it. We type the commands needed for a particular task after this prompt. The command is carried out by R after you hit the Return key. Once you have started R, you can start typing commands into the RStudio console, and the results will be calculated immediately, for example: 2*3 ## [1] 6 Note that prior to the output of “6” it shows “[1].” Now subtraction: 10-3 ## [1] 7 Again, prior to the output of “7” it shows “[1].” R can act like a basic calculator that you type commands in to. You can also use it like a more advanced scientific calculator and create variables that store information. All variables created by R are called objects. In R, we assign values to variables using an arrow-looking function &lt;- the assignment operator. For example, we can assign the value 2*3 to the variable x using the command: x &lt;- 2*3 To view the contents of any R object, just type its name, press enter, and the contents of that R object will be displayed: x ## [1] 6 5.4 Variables in R There are several different types of objects in R with fancy math names, including scalars, vectors, matrices (singular: matrix), arrays, dataframes, tables, and lists. The scalar** variable x above is one example of an R object. While a scalar variable such as x has just one element, a vector consists of several elements. The elements in a vector are all of the same type (e.g.. numbers or alphabetic characters), while lists may include elements such as characters as well as numeric quantities. Vectors and dataframes are the most common variables you’ll use. You’ll also encounter matrices often, and lists are ubiquitous in R but beginning users often don’t encounter them because they remain behind the scenes. 5.4.1 Vectors To create a vector, we can use the c() (combine) function. For example, to create a vector called myvector that has elements with values 8, 6, 9, 10, and 5, we type: myvector &lt;- c(8, 6, 9, 10, 5) # note: commas between each number! To see the contents of the variable myvector, we can just type its name and press enter: myvector ## [1] 8 6 9 10 5 5.4.2 Vector indexing The [1] is the index of the first element in the vector. We can extract any element of the vector by typing the vector name with the index of that element given in square brackets [...]. For example, to get the value of the 4th element in the vector myvector, we type: myvector[4] ## [1] 10 5.4.3 Character vectors Vectors can contain letters, such as those designating nucleic acids my.seq &lt;- c(&quot;A&quot;,&quot;T&quot;,&quot;C&quot;,&quot;G&quot;) They can also contain multi-letter strings: my.oligos &lt;- c(&quot;ATCGC&quot;,&quot;TTTCGC&quot;,&quot;CCCGCG&quot;,&quot;GGGCGC&quot;) 5.4.4 Lists NOTE: below is a discussion of lists in R. This is excellent information, but not necessary if this is your very very first time using R. In contrast to a vector, a list can contain elements of different types, for example, both numbers and letters. A list can even include other variables such as a vector. The list() function is used to create a list. For example, we could create a list mylist by typing: mylist &lt;- list(name=&quot;Charles Darwin&quot;, wife=&quot;Emma Darwin&quot;, myvector) We can then print out the contents of the list mylist by typing its name: mylist ## $name ## [1] &quot;Charles Darwin&quot; ## ## $wife ## [1] &quot;Emma Darwin&quot; ## ## [[3]] ## [1] 8 6 9 10 5 The elements in a list are numbered, and can be referred to using indices. We can extract an element of a list by typing the list name with the index of the element given in double square brackets (in contrast to a vector, where we only use single square brackets). We can extract the second element from mylist by typing: mylist[[2]] # note the double square brackets [[...]] ## [1] &quot;Emma Darwin&quot; As a baby step towards our next task, we can wrap index values as in the c() command like this: mylist[[c(2)]] # note the double square brackets [[...]] ## [1] &quot;Emma Darwin&quot; The number 2 and c(2) mean the same thing. Now, we can extract the second AND third elements from mylist. First, we put the indices 2 and 3 into a vector c(2,3), then wrap that vector in double square brackets: [c(2,3)]. All together it looks like this. mylist[c(2,3)] # note the double brackets ## $wife ## [1] &quot;Emma Darwin&quot; ## ## [[2]] ## [1] 8 6 9 10 5 Elements of lists may also be named, resulting in a named lists. The elements may then be referred to by giving the list name, followed by “$,” followed by the element name. For example, mylist$name is the same as mylist[[1]] and mylist$wife is the same as mylist[[2]]: mylist$wife ## [1] &quot;Emma Darwin&quot; We can find out the names of the named elements in a list by using the attributes() function, for example: attributes(mylist) ## $names ## [1] &quot;name&quot; &quot;wife&quot; &quot;&quot; When you use the attributes() function to find the named elements of a list variable, the named elements are always listed under a heading “$names.” Therefore, we see that the named elements of the list variable mylist are called “name” and “wife,” and we can retrieve their values by typing mylist$name and mylist$wife, respectively. 5.4.5 Tables Another type of object that you will encounter in R is a table. The table() function allows you to total up or tabulate the number of times a value occurs within a vector. Tables are typically used on vectors containing character data, such as letters, words, or names, but can work on numeric data data. 5.4.5.1 Tables - The basics If we made a vector variable “nucleotides” containing the of a DNA molecule, we can use the table() function to produce a table variable that contains the number of bases with each possible nucleotides: bases &lt;- c(&quot;A&quot;, &quot;T&quot;, &quot;A&quot;, &quot;A&quot;, &quot;T&quot;, &quot;C&quot;, &quot;G&quot;, &quot;C&quot;, &quot;G&quot;) Now make the table table(bases) ## bases ## A C G T ## 3 2 2 2 We can store the table variable produced by the function table(), and call the stored table “bases.table,” by typing: bases.table &lt;- table(bases) Tables also work on vectors containing numbers. First, a vector of numbers. numeric.vecter &lt;- c(1,1,1,1,3,4,4,4,4) Second, a table, showing how many times each number occurs. table(numeric.vecter) ## numeric.vecter ## 1 3 4 ## 4 1 4 5.4.5.2 Tables - further details To access elements in a table variable, you need to use double square brackets, just like accessing elements in a list. For example, to access the fourth element in the table bases.table (the number of Ts in the sequence), we type: bases.table[[4]] # double brackets! ## [1] 2 Alternatively, you can use the name of the fourth element in the table (“John”) to find the value of that table element: bases.table[[&quot;T&quot;]] ## [1] 2 5.5 Arguments Functions in R usually require arguments, which are input variables (i.e.. objects) that are passed to them, which they then carry out some operation on. For example, the log10() function is passed a number, and it then calculates the log to the base 10 of that number: log10(100) ## [1] 2 There’s a more generic function, log(), where we pass it not only a number to take the log of, but also the specific base of the logarithm. To take the log base 10 with the log() function we do this log(100, base = 10) ## [1] 2 We can also take logs with other bases, such as 2: log(100, base = 2) ## [1] 6.643856 5.6 Help files with help() and ? In R, you can get help about a particular function by using the help() function. For example, if you want help about the log10() function, you can type: help(&quot;log10&quot;) When you use the help() function, a box or web pag will show up in one of the panes of RStudio with information about the function that you asked for help with. You can also use the ? next to the function like this ?log10 Help files are a mixed bag in R, and it can take some getting used to them. An excellent overview of this is Kieran Healy’s “How to read an R help page.” 5.7 Searching for functions with help.search() and RSiteSearch() If you are not sure of the name of a function, but think you know part of its name, you can search for the function name using the help.search() and RSiteSearch() functions. The help.search() function searches to see if you already have a function installed (from one of the R packages that you have installed) that may be related to some topic you’re interested in. RSiteSearch() searches all R functions (including those in packages that you haven’t yet installed) for functions related to the topic you are interested in. For example, if you want to know if there is a function to calculate the standard deviation (SD) of a set of numbers, you can search for the names of all installed functions containing the word “deviation” in their description by typing: help.search(&quot;deviation&quot;) Among the functions that were found, is the function sd() in the stats package (an R package that comes with the base R installation), which is used for calculating the standard deviation. Now, instead of searching just the packages we’ve have on our computer let’s search all R packages on CRAN. Let’s look for things related to DNA. Note that RSiteSearch() doesn’t provide output within RStudio, but rather opens up your web browser for you to display the results. RSiteSearch(&quot;DNA&quot;) The results of the RSiteSearch() function will be hits to descriptions of R functions, as well as to R mailing list discussions of those functions. 5.8 More on functions We can perform computations with R using objects such as scalars and vectors. For example, to calculate the average of the values in the vector myvector (i.e.. the average of 8, 6, 9, 10 and 5), we can use the mean() function: mean(myvector) # note: no &quot; &quot; ## [1] 7.6 We have been using built-in R functions such as mean(), length(), print(), plot(), etc. 5.8.1 Writing your own functions NOTE: *Writing your own functions is an advanced skills. New users can skip this section. We can also create our own functions in R to do calculations that you want to carry out very often on different input data sets. For example, we can create a function to calculate the value of 20 plus square of some input number: myfunction &lt;- function(x) { return(20 + (x*x)) } This function will calculate the square of a number (x), and then add 20 to that value. The return() statement returns the calculated value. Once you have typed in this function, the function is then available for use. For example, we can use the function for different input numbers (e.g.. 10, 25): myfunction(10) ## [1] 120 5.9 Quiting R To quit R either close the program, or type: q() 5.10 Links and Further Reading Some links are included here for further reading. For a more in-depth introduction to R, a good online tutorial is available on the “Kickstarting R” website, cran.r-project.org/doc/contrib/Lemon-kickstart. There is another nice (slightly more in-depth) tutorial to R available on the “Introduction to R” website, cran.r-project.org/doc/manuals/R-intro.html. Chapter 3 of Danielle Navarro’s book is an excellent intro to the basics of R. "],["dna-descriptive-statics-part-1.html", "Chapter 6 DNA descriptive statics - Part 1 6.1 Preface 6.2 Writing TODO: 6.3 Introduction 6.4 Vocabulary 6.5 Functions 6.6 Preliminaries 6.7 Converting DNA from FASTA format 6.8 Length of a DNA sequence 6.9 Acknowledgements", " Chapter 6 DNA descriptive statics - Part 1 By: Avril Coghlan Adapted, edited and expanded: Nathan Brouwer (brouwern@gmail.com) under the Creative Commons 3.0 Attribution License (CC BY 3.0). 6.1 Preface This is a modification of “DNA Sequence Statistics (1)” from Avril Coghlan’s A little book of R for bioinformatics.. The text and code were originally written by Dr. Coghlan and distributed under the Creative Commons 3.0 license. 6.2 Writing TODO: Add biology introduction Work on flow organize intial sections (intro, vocab, preliminaries) 6.3 Introduction 6.4 Vocabulary GC content DNA words scatterplots, histograms, piecharts, and boxplots 6.5 Functions seqinr::GC() seqinr::count() 6.6 Preliminaries library(compbio4all) library(seqinr) 6.7 Converting DNA from FASTA format In a previous exercise we downloaded and examined DNA sequence in the FASTA format. The sequence we worked with is also stored as a data file within the compbio4all pa package and can be brought into memory using the data() command. data(&quot;dengueseq_fasta&quot;) We can look at this data object with the str() command str(dengueseq_fasta) ## chr &quot;&gt;NC_001477.1 Dengue virus 1, complete genome\\nAGTTGTTAGTCTACGTGGACCGACAAGAACAGTTTCGAATCGGAAGCTTGCTTAACGTAGTTCTA&quot;| __truncated__ This isn’t in a format we can work with directly so we’ll use the function fasta_cleaner() to set it up. header. &lt;- &quot;&gt;NC_001477.1 Dengue virus 1, complete genome&quot; dengueseq_vector &lt;- compbio4all::fasta_cleaner(dengueseq_fasta) Now check it out. str(dengueseq_vector) ## chr [1:10735] &quot;A&quot; &quot;G&quot; &quot;T&quot; &quot;T&quot; &quot;G&quot; &quot;T&quot; &quot;T&quot; &quot;A&quot; &quot;G&quot; &quot;T&quot; &quot;C&quot; &quot;T&quot; &quot;A&quot; &quot;C&quot; &quot;G&quot; &quot;T&quot; &quot;G&quot; &quot;G&quot; ... What we have here is each base of the sequence in a seperate slot of our vector. The first four bases are “AGTT” We can see the first one like this dengueseq_vector[1] ## [1] &quot;A&quot; The second one like this dengueseq_vector[2] ## [1] &quot;G&quot; The first and second like this dengueseq_vector[1:2] ## [1] &quot;A&quot; &quot;G&quot; and all four like this dengueseq_vector[1:4] ## [1] &quot;A&quot; &quot;G&quot; &quot;T&quot; &quot;T&quot; 6.8 Length of a DNA sequence Once you have retrieved a DNA sequence, we can obtain some simple statistics to describe that sequence, such as the sequence’s total length in nucleotides. In the above example, we retrieved the DEN-1 Dengue virus genome sequence, and stored it in the vector variable dengueseq_vector To obtain the length of the genome sequence, we would use the length() function, typing: length(dengueseq_vector) ## [1] 10735 The length() function will give you back the length of the sequence stored in variable dengueseq_vector, in nucleotides. The length() function actually gives the number of elements (slots) in the input vector that you passed to it, which in this case in the number of elements in the vector dengueseq_vector. Since each element of the vector dengueseq_vector contains one nucleotide of the DEN-1 Dengue virus sequence, the result for the DEN-1 Dengue virus genome tells us the length of its genome sequence (ie. 10735 nucleotides long). 6.8.1 Base composition of a DNA sequence An obvious first analysis of any DNA sequence is to count the number of occurrences of the four different nucleotides (“A,” “C,” “G,” and “T”) in the sequence. This can be done using the the table() function. For example, to find the number of As, Cs, Gs, and Ts in the DEN-1 Dengue virus sequence (which you have put into vector variable dengueseq_vector, using the commands above), you would type: table(dengueseq_vector) ## dengueseq_vector ## A C G T ## 3426 2240 2770 2299 This means that the DEN-1 Dengue virus genome sequence has 3426 As occurring throughout the genome, 2240 Cs, and so forth. 6.8.2 GC Content of DNA One of the most fundamental properties of a genome sequence is its GC content, the fraction of the sequence that consists of Gs and Cs, ie. the %(G+C). The GC content can be calculated as the percentage of the bases in the genome that are Gs or Cs. That is, GC content = (number of Gs + number of Cs)100/(genome length). For example, if the genome is 100 bp, and 20 bases are Gs and 21 bases are Cs, then the GC content is (20 + 21)100/100 = 41%. You can easily calculate the GC content based on the number of As, Gs, Cs, and Ts in the genome sequence. For example, for the DEN-1 Dengue virus genome sequence, we know from using the table() function above that the genome contains 3426 As, 2240 Cs, 2770 Gs and 2299 Ts. Therefore, we can calculate the GC content using the command: (2240+2770)*100/(3426+2240+2770+2299) ## [1] 46.66977 Alternatively, if you are feeling lazy, you can use the GC() function in the SeqinR package, which gives the fraction of bases in the sequence that are Gs or Cs. seqinr::GC(dengueseq_vector) ## [1] 0.4666977 The result above means that the fraction of bases in the DEN-1 Dengue virus genome that are Gs or Cs is 0.4666977. To convert the fraction to a percentage, we have to multiply by 100, so the GC content as a percentage is 46.66977%. 6.8.3 DNA words As well as the frequency of each of the individual nucleotides (“A,” “G,” “T,” “C”) in a DNA sequence, it is also interesting to know the frequency of longer DNA words, also referred to as genomic words. The individual nucleotides are DNA words that are 1 nucleotide long, but we may also want to find out the frequency of DNA words that are 2 nucleotides long (ie. “AA,” “AG,” “AC,” “AT,” “CA,” “CG,” “CC,” “CT,” “GA,” “GG,” “GC,” “GT,” “TA,” “TG,” “TC,” and “TT”), 3 nucleotides long (eg. “AAA,” “AAT,” “ACG,” etc.), 4 nucleotides long, etc. To find the number of occurrences of DNA words of a particular length, we can use the count() function from the R SeqinR package. The count() function only works with lower-case letters, so first we have to use the tolower() function to convert our upper class genome to lower case dengueseq_vector &lt;-tolower(dengueseq_vector) Now we can look for words. For example, to find the number of occurrences of DNA words that are 1 nucleotide long in the sequence dengueseq_vector, we type: seqinr::count(dengueseq_vector, 1) ## ## a c g t ## 3426 2240 2770 2299 As expected, this gives us the number of occurrences of the individual nucleotides. To find the number of occurrences of DNA words that are 2 nucleotides long, we type: seqinr::count(dengueseq_vector, 2) ## ## aa ac ag at ca cc cg ct ga gc gg gt ta tc tg tt ## 1108 720 890 708 901 523 261 555 976 500 787 507 440 497 832 529 Note that by default the count() function includes all overlapping DNA words in a sequence. Therefore, for example, the sequence “ATG” is considered to contain two words that are two nucleotides long: “AT” and “TG.” If you type help(‘count’), you will see that the result (output) of the function count() is a table object. This means that you can use double square brackets to extract the values of elements from the table. For example, to extract the value of the third element (the number of Gs in the DEN-1 Dengue virus sequence), you can type: denguetable_2 &lt;- seqinr::count(dengueseq_vector,2) denguetable_2[[3]] ## [1] 890 The command above extracts the third element of the table produced by count(dengueseq_vector,1), which we have stored in the table variable denguetable. Alternatively, you can find the value of the element of the table in column “g” by typing: denguetable_2[[&quot;aa&quot;]] ## [1] 1108 Once you have table you can make a basic plot barplot(denguetable_2) We can sort by the number of words using the sort() command sort(denguetable_2) ## ## cg ta tc gc gt cc tt ct at ac gg tg ag ca ga aa ## 261 440 497 500 507 523 529 555 708 720 787 832 890 901 976 1108 Let’s save over the original object denguetable_2 &lt;- sort(denguetable_2) barplot(denguetable_2) R will automatically try to optimize the appearance of the labels on the graph so you may not see all of them; no worries. R can also make pie charts. Piecharts only really work when there are a few items being plots, like the four bases. denguetable_1 &lt;- seqinr::count(dengueseq_vector,1) Make a piechart with pie() pie(denguetable_1) 6.8.4 Summary In this practical, have learned to use the following R functions: length() for finding the length of a vector or list table() for printing out a table of the number of occurrences of each type of item in a vector or list. These functions belong to the standard installation of R. You have also learnt the following R functions that belong to the SeqinR package: GC() for calculating the GC content for a DNA sequence count() for calculating the number of occurrences of DNA words of a particular length in a DNA sequence 6.9 Acknowledgements This is a modification of “DNA Sequence Statistics (1)” from Avril Coghlan’s A little book of R for bioinformatics.. Almost all of text and code was originally written by Dr. Coghlan and distributed under the Creative Commons 3.0 license. In “A little book…” Coghlan noted: “Many of the ideas for the examples and exercises for this chapter were inspired by the Matlab case studies on Haemophilus influenzae (www.computational-genomics.net/case_studies/haemophilus_demo.html) and Bacteriophage lambda (http://www.computational-genomics.net/case_studies/lambdaphage_demo.html) from the website that accompanies the book Introduction to Computational Genomics: a case studies approach by Cristianini and Hahn (Cambridge University Press; www.computational-genomics.net/book/).” 6.9.1 License The content in this book is licensed under a Creative Commons Attribution 3.0 License. https://creativecommons.org/licenses/by/3.0/us/ 6.9.2 Exercises Answer the following questions, using the R package. For each question, please record your answer, and what you typed into R to get this answer. Model answers to the exercises are given in Answers to the exercises on DNA Sequence Statistics (1). What are the last twenty nucleotides of the Dengue virus genome sequence? What is the length in nucleotides of the genome sequence for the bacterium Mycobacterium leprae strain TN (accession NC_002677)? Note: Mycobacterium leprae is a bacterium that is responsible for causing leprosy, which is classified by the WHO as a neglected tropical disease. As the genome sequence is a DNA sequence, if you are retrieving its sequence via the NCBI website, you will need to look for it in the NCBI Nucleotide database. How many of each of the four nucleotides A, C, T and G, and any other symbols, are there in the Mycobacterium leprae TN genome sequence? Note: other symbols apart from the four nucleotides A/C/T/G may appear in a sequence. They correspond to positions in the sequence that are are not clearly one base or another and they are due, for example, to sequencing uncertainties. or example, the symbol ‘N’ means ‘aNy base,’ while ‘R’ means ‘A or G’ (puRine). There is a table of symbols at www.bioinformatics.org/sms/iupac.html. What is the GC content of the Mycobacterium leprae TN genome sequence, when (i) all non-A/C/T/G nucleotides are included, (ii) non-A/C/T/G nucleotides are discarded? Hint: look at the help page for the GC() function to find out how it deals with non-A/C/T/G nucleotides. How many of each of the four nucleotides A, C, T and G are there in the complement of the Mycobacterium leprae TN genome sequence? Hint: you will first need to search for a function to calculate the complement of a sequence. Once you have found out what function to use, remember to use the help() function to find out what are the arguments (inputs) and results (outputs) of that function. How does the function deal with symbols other than the four nucleotides A, C, T and G? Are the numbers of As, Cs, Ts, and Gs in the complementary sequence what you would expect? How many occurrences of the DNA words CC, CG and GC occur in the Mycobacterium leprae TN genome sequence? How many occurrences of the DNA words CC, CG and GC occur in the (i) first 1000 and (ii) last 1000 nucleotides of the Mycobacterium leprae TN genome sequence? 1.How can you check that the subsequence that you have looked at is 1000 nucleotides long? "],["programming-in-r-for-loops.html", "Chapter 7 Programming in R: for loops 7.1 Preface 7.2 Vocab 7.3 Functions 7.4 Basic for loops in in R 7.5 Challenge: complicated vectors of values", " Chapter 7 Programming in R: for loops By: Avril Coghlan Adapted, edited and expanded: Nathan Brouwer (brouwern@gmail.com) under the Creative Commons 3.0 Attribution License (CC BY 3.0). 7.1 Preface This is a modification of “DNA Sequence Statistics (1)” from Avril Coghlan’s A little book of R for bioinformatics.. The text and code was originally written by Dr. Coghlan and distributed under the Creative Commons 3.0 license. 7.2 Vocab for loop curly brackets 7.3 Functions for() print() 7.4 Basic for loops in in R In R, just as in programming languages such as Python, it is possible to write a for loop to carry out the same command several times. For example, say we have a pressing need to calculate the square the square of each number between 1 and 4. We could write for lines of code like this to do it: 1^2 ## [1] 1 2^2 ## [1] 4 3^2 ## [1] 9 4^2 ## [1] 16 If we know how to write a for loop, we could do the same think like this: for (i in 1:4) { print (i*i) } ## [1] 1 ## [1] 4 ## [1] 9 ## [1] 16 In the for loop above, the variable i is a counter or index for the number of cycles through the loop. In the first cycle through the loop, the value of i is 1, and so i * i = 1 is printed out. In the second cycle through the loop, the value of i is 2, and so i * i = 4 is printed out. In the third cycle through the loop, the value of i is 3, and so i * i = 9 is printed out. The loop continues until the value of i is 4. Note that the commands that are to be carried out at each cycle of the for loop must be enclosed within curly brackets (“{” and “}”). You may be thinking “ok, so it took four lines of code to do 12 through 42 each on their own, and three lines to do it wit the loop; what’s the big deal?” What if you need to do 1 through 100 squared for some reason? Now the for loop is a lot less work. You can also give a for loop a vector of numbers containing the values that you want the counter i to take in subsequent cycles. For example, you can make a vector containing the numbers 1, 2, 3, and 4, and write a for loop to print out the square of each number in vector avector: ## [1] 1 ## [1] 4 ## [1] 9 ## [1] 16 The results should be the same as before. 7.5 Challenge: complicated vectors of values Here’s a more complex example. If you don’t understand it don’t worry, its not something you’d probably do in practice. Challenge: How can we use a for loop to print out the square of every second number between, say, 1 and 10? The answer is to use the seq() function with “by = 2” to tell the for loop to take every second number between 1 and 10: for (i in seq(1, 10, by = 2)) { print (i*i) } ## [1] 1 ## [1] 9 ## [1] 25 ## [1] 49 ## [1] 81 In the first cycle of this loop, the value of i is 1, and so i * i = 1 is printed out. In the second cycle through the loop, the value of i is 3, and so i * i = 9 is printed out. The loop continues until the value of i is 9. In the fifth cycle through the loop, the value of i is 9, and so i * i = 81 is printed out. "],["mini-tutorial-vectors-in-r.html", "Chapter 8 Mini tutorial: Vectors in R 8.1 Preface 8.2 Vocab", " Chapter 8 Mini tutorial: Vectors in R By: Avril Coghlan Adapted, edited and expanded: Nathan Brouwer (brouwern@gmail.com) under the Creative Commons 3.0 Attribution License (CC BY 3.0). 8.1 Preface This is a modification of part of“DNA Sequence Statistics (2)” from Avril Coghlan’s A little book of R for bioinformatics.. Most of text and code was originally written by Dr. Coghlan and distributed under the Creative Commons 3.0 license. 8.2 Vocab base R scalar, vector, matrix regular expressions "],["functions-2.html", "Chapter 9 Functions 9.1 Vectors in R 9.2 Math on vectors 9.3 Functions on vectors 9.4 Operations with two vectors 9.5 Subsetting vectors 9.6 Sequences of numbers 9.7 Vectors can hold numeric or character data 9.8 Regular expressions can modify character data", " Chapter 9 Functions seq() is(), is.vector(), is.matrix() gsub() 9.1 Vectors in R Variables in R include scalars, vectors, and lists. Functions in R carry out operations on variables, for example, using the log10() function to calculate the log to the base 10 of a scalar variable x, or using the mean() function to calculate the average of the values in a vector variable myvector. For example, we can use log10() on a scalar object like this: # store value in object x &lt;- 100 # take log base 10 of object log10(x) ## [1] 2 Note that while mathematically x is a single number, or a scalar, R considers it to be a vector: is.vector(x) ## [1] TRUE There are many “is” commands. What is returned when you run is.matrix() on a vector? is.matrix(x) ## [1] FALSE Mathematically this is a bit odd, since often a vector is defined as a one-dimensional matrix, e.g., a single column or single row of a matrix. But in R land, a vector is a vector, and matrix is a matrix, and there are no explicit scalars. 9.2 Math on vectors Vectors can serve as the input for mathematical operations. When this is done R does the mathematical operation separately on each element of the vector. This is a unique feature of R that can be hard to get used to even for people with previous programming experience. Let’s make a vector of numbers: myvector &lt;- c(30,16,303,99,11,111) What happens when we multiply myvector by 10? myvector*10 ## [1] 300 160 3030 990 110 1110 R has taken each of the 6 values, 30 through 111, of myvector and multiplied each one by 10, giving us 6 results. That is, what R did was ## 30*10 # first value of myvector ## 16*10 # second value of myvector ## 303*10 # .... ## 99*10 ## 111*10 # last value of myvector The normal order of operations rules apply to vectors as they do to operations we’re more used to. So multiplying myvector by 10 is the same whether you put he 10 before or after vector. That is myvector\\*10 is the same as 10\\*myvector. myvector*10 ## [1] 300 160 3030 990 110 1110 10*myvector ## [1] 300 160 3030 990 110 1110 What happen when you subtract 30 from myvector? Write the code below. myvector-30 ## [1] 0 -14 273 69 -19 81 So, what R did was ## 30-30 # first value of myvector ## 16-30 # second value of myvector ## 303-30 # .... ## 99-30 ## 111-30 # last value of myvector You can also square a vector myvector^2 ## [1] 900 256 91809 9801 121 12321 Which is the same as ## 30^2 # first value of myvector ## 16^2 # second value of myvector ## 303^2 # .... ## 99^2 ## 111^2 # last value of myvector Also you can take the square root of a vector… sqrt(myvector) ## [1] 5.477226 4.000000 17.406895 9.949874 3.316625 10.535654 …and take the log of a vector… log(myvector) ## [1] 3.401197 2.772589 5.713733 4.595120 2.397895 4.709530 …and just about any other mathematical operation. Here we are working on a separate vector object; all of these rules apply to a column in a matrix or a dataframe. This attribution of R is called vectorization. 9.3 Functions on vectors We can use functions on vectors. Typically these use the vectors as an input and all the numbers are processed into an output. Call the mean() function on the vector we made called myvector. mean(myvector) ## [1] 95 Note how we get a single value back - the mean of all the values in the vector. R saw that we had a vector of multiple and knew that the mean is a function that doesn’t get applied to single number, but sets of numbers. The function sd() calculates the standard deviation. Apply the sd() to myvector: sd(myvector) ## [1] 110.5061 9.4 Operations with two vectors You can also subtract one vector from another vector. This can be a little weird when you first see it. Make another vector with the numbers 5, 10, 15, 20, 25, 30. Call this myvector2: myvector2 &lt;- c(5, 10, 15, 20, 25, 30) Now subtract myvector2 from myvector. What happens? myvector-myvector2 ## [1] 25 6 288 79 -14 81 9.5 Subsetting vectors You can extract an element of a vector by typing the vector name with the index of that element given in square brackets. For example, to get the value of the 3rd element in the vector myvector, we type: myvector[3] ## [1] 303 Extract the 4th element of the vector: myvector[4] ## [1] 99 You can extract more than one element by using a vector in the brackets: First, say I want to extract the 3rd and the 4th element. I can make a vector with 3 and 4 in it: nums &lt;- c(3,4) Then put that vector in the brackets: myvector[nums] ## [1] 303 99 We can also do it directly like this, skipping the vector-creation step: myvector[c(3,4)] ## [1] 303 99 In the chunk below extract the 1st and 2nd elements: myvector[c(1,2)] ## [1] 30 16 9.6 Sequences of numbers Often we want a vector of numbers in sequential order. That is, a vector with the numbers 1, 2, 3, 4, … or 5, 10, 15, 20, … The easiest way to do this is using a colon 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 Note that in R 1:10 is equivalent to c(1:10) c(1:10) ## [1] 1 2 3 4 5 6 7 8 9 10 Usually to emphasize that a vector is being created I will use c(1:10) We can do any number to any numbers c(20:30) ## [1] 20 21 22 23 24 25 26 27 28 29 30 We can also do it in reverse. In the code below put 30 before 20: c(30:20) ## [1] 30 29 28 27 26 25 24 23 22 21 20 A useful function in R is the seq() function, which is an explicit function that can be used to create a vector containing a sequence of numbers that run from a particular number to another particular number. seq(1, 10) ## [1] 1 2 3 4 5 6 7 8 9 10 Using seq() instead of a : can be useful for readability to make it explicit what is going on. More importantly, seq has an argument by = ... so you can make a sequence of number with any interval between For example, if we want to create the sequence of numbers from 1 to 10 in steps of 1 (i.e.. 1, 2, 3, 4, … 10), we can type: seq(1, 10, by = 1) ## [1] 1 2 3 4 5 6 7 8 9 10 We can change the step size by altering the value of the by argument given to the function seq(). For example, if we want to create a sequence of numbers from 1-100 in steps of 20 (i.e.. 1, 21, 41, … 101), we can type: seq(1, 101, by = 20) ## [1] 1 21 41 61 81 101 9.7 Vectors can hold numeric or character data The vector we created above holds numeric data, as indicated by class() class(myvector) ## [1] &quot;numeric&quot; Vectors can also holder character data, like the genetic code: # vector of character data myvector &lt;- c(&quot;A&quot;,&quot;T&quot;,&quot;G&quot;) # how it looks myvector ## [1] &quot;A&quot; &quot;T&quot; &quot;G&quot; # what is &quot;is&quot; class(myvector) ## [1] &quot;character&quot; 9.8 Regular expressions can modify character data We can use regular expressions to modify character data. For example, change the Ts to Us myvector &lt;- gsub(&quot;T&quot;, &quot;U&quot;, myvector) Now check it out myvector ## [1] &quot;A&quot; &quot;U&quot; &quot;G&quot; Regular expressions are a deep subject in computing. You can find some more information about them here. "],["plotting-vectors-in-base-r.html", "Chapter 10 Plotting vectors in base R 10.1 Preface 10.2 Plotting numeric data 10.3 Other plotting packages", " Chapter 10 Plotting vectors in base R By: Avril Coghlan Adapted, edited and expanded: Nathan Brouwer (brouwern@gmail.com) under the Creative Commons 3.0 Attribution License (CC BY 3.0). 10.1 Preface This is a modification of part of“DNA Sequence Statistics (2)” from Avril Coghlan’s A little book of R for bioinformatics.. Most of text and code was originally written by Dr. Coghlan and distributed under the Creative Commons 3.0 license. 10.2 Plotting numeric data R allows the production of a variety of plots, including scatterplots, histograms, piecharts, and boxplots. Usually we make plots from dataframes with 2 or more columns, but we can also make them from two separate vectors. This flexibility is useful, but also can cause some confusion. For example, if you have two equal-length vectors of numbers numeric.vect1 and numeric.vect1, you can plot a scatterplot of the values in myvector1 against the values in myvector2 using the base R plot()function. First, let’s make up some data in put it in vectors: numeric.vect1 &lt;- c(10, 15, 22, 35, 43) numeric.vect2 &lt;- c(3, 3.2, 3.9, 4.1, 5.2) Not plot with the base R plot() function: plot(numeric.vect1, numeric.vect2) Note that there is a comma between the two vector names. When building plots from dataframes you usually see a tilde (~), but when you have two vectors you can use just a comma. Also note the order of the vectors within the plot() command and which axes they appear on. The first vector is numeric.vect1 and it appears on the horizontal x-axis. If you want to label the axes on the plot, you can do this by giving the plot() function values for its optional arguments xlab = and ylab =: plot(numeric.vect1, # note again the comma, not a ~ numeric.vect2, xlab=&quot;vector1&quot;, ylab=&quot;vector2&quot;) We can store character data in vectors so if we want we could do this to set up our labels: mylabels &lt;- c(&quot;numeric.vect1&quot;,&quot;numeric.vect2&quot;) Then use bracket notation to call the labels from the vector plot(numeric.vect1, numeric.vect2, xlab=mylabels[1], ylab=mylabels[2]) If we want we can use a tilde to make our plot like this: plot(numeric.vect2 ~ numeric.vect1) Note that now, numeric.vect2 is on the left and numeric.vect1 is on the right. This flexibility can be tricky to keep track of. We can also combine these vectors into a dataframe and plot the data by referencing the data frame. First, we combine the two separate vectors into a dataframe using the cbind() command. df &lt;- cbind(numeric.vect1, numeric.vect2) Then we plot it like this, referencing the dataframe df via the data = ... argument. plot(numeric.vect2 ~ numeric.vect1, data = df) 10.3 Other plotting packages Base R has lots of plotting functions; additionally, people have written packages to implement new plotting capabilities. The package ggplot2 is currently the most popular plotting package, and ggpubr is a package which makes ggplot2 easier to use. For quick plots we’ll use base R functions, and when we get to more important things we’ll use ggplot2 and ggpubr. "],["programming-in-r-functions.html", "Chapter 11 Programming in R: functions 11.1 Preface 11.2 Vocab 11.3 Functions 11.4 Functions in R 11.5 Comments in R", " Chapter 11 Programming in R: functions By: Avril Coghlan Adapted, edited and expanded: Nathan Brouwer (brouwern@gmail.com) under the Creative Commons 3.0 Attribution License (CC BY 3.0). 11.1 Preface This is a modification of “DNA Sequence Statistics (1)” from Avril Coghlan’s A little book of R for bioinformatics.. The text and code was originally written by Dr. Coghlan and distributed under the Creative Commons 3.0 license. 11.2 Vocab function curly brackets 11.3 Functions function() 11.4 Functions in R We have been using built-in functions such as mean(), length(), print(), plot(), etc. We can also create our own functions in R to do calculations that you want to carry out very often on different input data sets. For example, we can create a function to calculate the value of 20 plus the square of some input number: myfunction &lt;- function(x) { output &lt;- (20 + (x*x)) return(output) } This function will calculate the square of a number (x), and then add 20 to that value. It stores this in a temporary object called output. The return() statement returns the calculated value. Once you have typed in this function, the function is then available for use. For example, we can use the function for different input numbers (e.g.. 10, 25): myfunction(10) ## [1] 120 myfunction(25) ## [1] 645 You can view the code that makes up a function by typing its name (without any parentheses). For example, we can try this by typing “myfunction”: myfunction ## function(x) { ## output &lt;- (20 + (x*x)) ## return(output) ## } ## &lt;bytecode: 0x7ff72ca85748&gt; 11.5 Comments in R When you are typing R, if you want to, you can write comments by writing the comment text after the “#” sign. This can be useful if you want to write some R commands that other people need to read and understand. R will ignore the comments when it is executing the commands. For example, you may want to write a comment to explain what the function log10() does: x &lt;- 100 log10(x) # Finds the log to the base 10 of variable x. ## [1] 2 "],["downloading-dna-sequences-as-fasta-files-in-r.html", "Chapter 12 Downloading DNA sequences as FASTA files in R 12.1 DNA Sequence Statistics: Part 1 12.2 Next steps", " Chapter 12 Downloading DNA sequences as FASTA files in R This is a modification of “DNA Sequence Statistics” from Avril Coghlan’s A little book of R for bioinformatics.. Most of the text and code was originally written by Dr. Coghlan and distributed under the Creative Commons 3.0 license. NOTE: There is some reduncnacy in this current draft that needs to be eliminated. 12.0.1 Functions library() help() length table seqinr::GC() seqinr::count() seqinr::write.fasta() 12.0.2 Software/websites www.ncbi.nlm.nih.gov Text editors (e.g. Notepad++, TextWrangler) 12.0.3 R vocabulary list library package CRAN wrapper 12.0.4 File types FASTA 12.0.5 Bioinformatics vocabulary accession, accession number NCBI NCBI Sequence Database EMBL Sequence Database FASTA file 12.0.6 Organisms and Sequence accessions Dengue virus: DEN-1, DEN-2, DEN-3, and DEN-4. The NCBI accessions for the DNA sequences of the DEN-1, DEN-2, DEN-3, and DEN-4 Dengue viruses are NC_001477, NC_001474, NC_001475 and NC_002640, respectively. According to Wikipedia “Dengue virus (DENV) is the cause of dengue fever. It is a mosquito-borne, single positive-stranded RNA virus … Five serotypes of the virus have been found, all of which can cause the full spectrum of disease. Nevertheless, scientists’ understanding of dengue virus may be simplistic, as rather than distinct … groups, a continuum appears to exist.” https://en.wikipedia.org/wiki/Dengue_virus 12.0.7 Preliminaries library(rentrez) library(compbio4all) 12.1 DNA Sequence Statistics: Part 1 12.1.1 Using R for Bioinformatics The chapter will guide you through the process of using R to carry out simple analyses that are common in bioinformatics and computational biology. In particular, the focus is on computational analysis of biological sequence data such as genome sequences and protein sequences. The programming approaches, however, are broadly generalizable to statistics and data science. The tutorials assume that the reader has some basic knowledge of biology, but not necessarily of bioinformatics. The focus is to explain simple bioinformatics analysis, and to explain how to carry out these analyses using R. 12.1.2 R packages for bioinformatics: Bioconductor and SeqinR Many authors have written R packages for performing a wide variety of analyses. These do not come with the standard R installation, but must be installed and loaded as “add-ons.” Bioinformaticians have written numerous specialized packages for R. In this tutorial, you will learn to use some of the function in the SeqinR package to to carry out simple analyses of DNA sequences. (SeqinR can retrieve sequences from a DNA sequence database, but this has largely been replaced by the functions in the package rentrez) Many well-known bioinformatics packages for R are in the Bioconductor set of R packages (www.bioconductor.org), which contains packages with many R functions for analyzing biological data sets such as microarray data. The SeqinR package is from CRAN, which contains R functions for obtaining sequences from DNA and protein sequence databases, and for analyzing DNA and protein sequences. We will also use functions from the rentrez and ape packages. Remember that you can ask for more information about a particular R command by using the help() function. For example, to ask for more information about the library(), you can type: help(&quot;library&quot;) You can also do this ?library 12.1.3 FASTA file format The FASTA format is a simple and widely used format for storing biological (e.g. DNA or protein) sequences. It was first used by the FASTA program for sequence alignment in the 1980s and has been adopted as standard by many other programs. FASTA files begin with a single-line description starting with a greater-than sign &gt; character, followed on the next line by the sequences. Here is an example of a FASTA file. (If you’re looking at the source script for this lesson you’ll see the cat() command, which is just a text display function used format the text when you run the code). ## &gt;A06852 183 residues MPRLFSYLLGVWLLLSQLPREIPGQSTNDFIKACGRELVRLWVEICGSVSWGRTALSLEEPQLETGPPAETMPSSITKDAEILKMMLEFVPNLPQELKATLSERQPSLRELQQSASKDSNLNFEEFKKIILNRQNEAEDKSLLELKNLGLDKHSRKKRLFRMTLSEKCCQVGCIRKDIARLC 12.1.4 The NCBI sequence database The US National Centre for Biotechnology Information (NCBI) maintains the NCBI Sequence Database, a huge database of all the DNA and protein sequence data that has been collected. There are also similar databases in Europe, the European Molecular Biology Laboratory (EMBL) Sequence Database, and Japan, the DNA Data Bank of Japan (DDBJ). These three databases exchange data every night, so at any one point in time, they contain almost identical data. Each sequence in the NCBI Sequence Database is stored in a separate record, and is assigned a unique identifier that can be used to refer to that record. The identifier is known as an accession, and consists of a mixture of numbers and letters. For example, Dengue virus causes Dengue fever, which is classified as a neglected tropical disease by the World Health Organization (WHO), is classified by any one of four types of Dengue virus: DEN-1, DEN-2, DEN-3, and DEN-4. The NCBI accessions for the DNA sequences of the DEN-1, DEN-2, DEN-3, and DEN-4 Dengue viruses are NC_001477 NC_001474 NC_001475 NC_002640 Note that because the NCBI Sequence Database, the EMBL Sequence Database, and DDBJ exchange data every night, the DEN-1 (and DEN-2, DEN-3, DEN-4) Dengue virus sequence are present in all three databases, but they have different accessions in each database, as they each use their own numbering systems for referring to their own sequence records. 12.1.5 Retrieving genome sequence data using rentrez You can retrieve sequence data from NCBI directly from R using the rentrez package. The DEN-1 Dengue virus genome sequence has NCBI accession NC_001477. To retrieve a sequence with a particular NCBI accession, you can use the function entrez_fetch() from the rentrez package. Note that to be specific where the function comes from I write it as package::function(). dengueseq_fasta &lt;- rentrez::entrez_fetch(db = &quot;nucleotide&quot;, id = &quot;NC_001477&quot;, rettype = &quot;fasta&quot;) Note that the “\" in the name is just an arbitrary way to separate two words. Another common format would be dengueseq.fasta. Some people like dengueseqFasta, called camel case because the capital letter makes a hump in the middle of the word. Underscores are becoming most common and are favored by developers associated with RStudio and the tidyverse of packages that many data scientists use. I switch between \".\" and \"” as separators, usually favoring \"_\" for function names and “.” for objects; I personally find camel case harder to read and to type. Ok, so what exactly have we done when we made dengueseq_fasta? We have an R object dengueseq_fasta which has the sequence linked to the accession number “NC_001477.” So where is the sequence, and what is it? First, what is it? is(dengueseq_fasta) ## [1] &quot;character&quot; &quot;vector&quot; &quot;data.frameRowLabels&quot; &quot;SuperClassMethod&quot; class(dengueseq_fasta) ## [1] &quot;character&quot; How big is it? Try the dim() and length() commands and see which one works. Do you know why one works and the other doesn’t? dim(dengueseq_fasta) ## NULL length(dengueseq_fasta) ## [1] 1 The size of the object is 1. Why is this? This is the genomics sequence of a virus, so you’d expect it to be fairly large. We’ll use another function below to explore that issue. Think about this first: how many pieces of unique information are in the dengueseq object? In what sense is there only one piece of information? If we want to actually see the sequence we can type just type dengueseq_fasta and press enter. This will print the WHOLE genomic sequence out but it will probably run of your screen. dengueseq_fasta This is a whole genome sequence, but its stored as single entry in a vector, so the length() command just tells us how many entries there are in the vector, which is just one! What this means is that the entire genomic sequence is stored in a single entry of the vector dengueseq_fasta. (If you’re not following along with this, no worries - its not essential to actually working with the data) If we want to actually know how long the sequence is, we need to use the function nchar(). nchar(dengueseq_fasta) ## [1] 10935 The sequence is 10935 bases long. All of these bases are stored as a single character string with no spaces in a single entry of our dengueseq_fasta vector. This isn’t actually a useful format for us, so below were’ going to convert it to something more useful. If we want to see just part of the sequence we can use the strtrim() function. Before you run the code below, predict what the 100 means. ## [1] &quot;&gt;NC_001477.1 Dengue virus 1, complete genome\\nAGTTGTTAGTCTACGTGGACCGACAAGAACAGTTTCGAATCGGAAGCTTGCTTAA&quot; Note that at the end of the name is a slash followed by an n, which indicates to the computer that this is a newline; this is read by text editor, but is ignored by R in this context. ## [1] &quot;&gt;NC_001477.1 Dengue virus 1, complete genome\\n&quot; After the \\\\n begins the sequence, which will continue on for a LOOOOOONG way. Let’s just print a little bit. ## [1] &quot;&gt;NC_001477.1 Dengue virus 1, complete genome\\nAGTTGTT&quot; Let’s print some more. Do you notice anything beside A, T, C and G in the sequence? strtrim(dengueseq_fasta, 200) ## [1] &quot;&gt;NC_001477.1 Dengue virus 1, complete genome\\nAGTTGTTAGTCTACGTGGACCGACAAGAACAGTTTCGAATCGGAAGCTTGCTTAACGTAGTTCTAACAGT\\nTTTTTATTAGAGAGCAGATCTCTGATGAACAACCAACGGAAAAAGACGGGTCGACCGTCTTTCAATATGC\\nTGAAACGCGCGAG&quot; Again, there are the \\\\n newline characters, which tell text editors and wordprocessors how to display the file. Now that we a sense of what we’re looking at let’s explore the dengueseq_fasta a bit more. We can find out more information about what it is using the class()command. class(dengueseq_fasta) ## [1] &quot;character&quot; As noted before, this is character data. Many things in R are vectors so we can ask R is.vector() is.vector(dengueseq_fasta) ## [1] TRUE Yup, that’s true. Ok, let’s see what else. A handy though often verbose command is is(), which tells us what an object, well, what it is: is(dengueseq_fasta) ## [1] &quot;character&quot; &quot;vector&quot; &quot;data.frameRowLabels&quot; &quot;SuperClassMethod&quot; There is a lot here but if you scan for some key words you will see “character” and “vector” at the top. The other stuff you can ignore. The first two things, though, tell us the dengueseq_fasta is a vector of the class character: that is, a character vector. Another handy function is str(), which gives us a peak at the context and structure of an R object. This is most useful when you are working in the R console or with dataframes, but is a useful function to run on all R objects. How does this output differ from other ways we’ve displayed dengueseq_fasta? str(dengueseq_fasta) ## chr &quot;&gt;NC_001477.1 Dengue virus 1, complete genome\\nAGTTGTTAGTCTACGTGGACCGACAAGAACAGTTTCGAATCGGAAGCTTGCTTAACGTAGTTCTA&quot;| __truncated__ We know it contains character data - how many characters? nchar() for “number of characters” answers that: nchar(dengueseq_fasta) ## [1] 10935 12.2 Next steps On their own, FASTA files in R are not directly useful. In the next lesson we’ll process our dengueseq_fasta file so that we can use it in analyses. "],["downloading-dna-sequences-as-fasta-files-in-r-1.html", "Chapter 13 Downloading DNA sequences as FASTA files in R 13.1 Convert FASTA sequence to an R variable 13.2 Saving FASTA files 13.3 Reading in FASTA files", " Chapter 13 Downloading DNA sequences as FASTA files in R This is a modification of “DNA Sequence Statistics” from Avril Coghlan’s A little book of R for bioinformatics.. Most of the text and code was originally written by Dr. Coghlan and distributed under the Creative Commons 3.0 license. library(compbio4all) library(stringr) data(dengueseq_fasta) 13.1 Convert FASTA sequence to an R variable We can’t actually do much with the contents of the dengueseq_fasta we downloaded with the rentrez package except read them. If we want do address some biological questions with the data we need is to convert it into a data structure R can work with. There are several things we need to remove: The meta data line &gt;NC_001477.1 Dengue virus 1, complete genome (metadata is “data” about data, such as where it came from, what it is, who made it, etc.). All the “\\n” that show up in the file (these are the line breaks). Put each nucleotide of the sequence into its own spot in a vector. There are functions that can do this automatically, but I haven’t found one I like, and walking through this will help you understand the types of operations you can do on text data. The first two steps involve removing things from the existing character string that contains the sequence. The third step will split the single continuous character string like “AGTTGTTAGTCTACGT…” into a character vector like c(\"A\",\"G\",\"T\",\"T\",\"G\",\"T\",\"T\",\"A\",\"G\",\"T\",\"C\",\"T\",\"A\",\"C\",\"G\",\"T\"...), where each element of the vector is a single character a stored in a separate slot in the vevtor. The second item is the easiest to take care of. R and many programming languages have tools called regular expressions that allow you to manipulate text. R has a function called gsub() which allows you to substitute or delete character data from a string. First I’ll remove all those \\\\n values. The regular expression function gsub() takes three arguments: 1. pattern = .... This is what we need it to find so we can replace it. 1. replacement = .... The replacement. 1. x = .... A character string or vector. We need to get rid of the \\\\n so that we are left with only A, T and G, which are the actually information of the sequence. We want \\\\n removed, so the replacement will be \"\", which is as set of quotation marks with nothing in the middle, which means “delete the target pattern and put nothing in its place.” One thing that is tricky about regular expressions is that many characters have special meaning to the functions, such as slashes, dollar signs, and brackets. So, if you want to find and replace one of these specially designated characters you need to put a slash in front of them. So when we set the pattern, instead of setting the pattern to a slash before an n, we have to give it two slashes. Here is the regular expression to delete the newline characer \\n. # note: we want to find all the \\n, but need to set the pattern as \\\\n dengueseq_vector &lt;- gsub(pattern = &quot;\\\\n&quot;, replacement = &quot;&quot;, x = dengueseq_fasta) We can use strtrim() to see if it worked strtrim(dengueseq_vector, 80) ## [1] &quot;&gt;NC_001477.1 Dengue virus 1, complete genomeAGTTGTTAGTCTACGTGGACCGACAAGAACAGTTTC&quot; Now for the metadata header. This is a bit complex, but the following code is going to take all the that occurs before the beginning of the sequence (“AGTTGTTAGTC”) and delete it. First, I’ll define what I want to get rid of in an R object. This will make the call to gsub() a little cleaner to read seq.header &lt;- &quot;&gt;NC_001477.1 Dengue virus 1, complete genome&quot; Now I’ll get rid of the header with with gsub(). dengueseq_vector &lt;- gsub(pattern = seq.header, # defined above replacement = &quot;&quot;, x = dengueseq_vector) See if it worked: strtrim(dengueseq_vector, 80) ## [1] &quot;AGTTGTTAGTCTACGTGGACCGACAAGAACAGTTTCGAATCGGAAGCTTGCTTAACGTAGTTCTAACAGTTTTTTATTAG&quot; Now the more complex part. We need to split up a continuous, unborken string of letters into a vector wher each letter is on its own. This can be done with the str_split() function (“string split”) from the stringr package. The notation stringr::str_split() mean “use the str_split function from from the stringr package.” More specifically, it temporarily loads the stringr package and gives R access to just the str_split function. These allows you to call a single function without loading the whole library. There are several arguments to str_split, and I’ve tacked a [[1]] on to the end. First, run the command dengueseq_vector_split &lt;- stringr::str_split(dengueseq_vector, pattern = &quot;&quot;, simplify = FALSE)[[1]] Look at the output with str() str(dengueseq_vector_split) ## chr [1:10735] &quot;A&quot; &quot;G&quot; &quot;T&quot; &quot;T&quot; &quot;G&quot; &quot;T&quot; &quot;T&quot; &quot;A&quot; &quot;G&quot; &quot;T&quot; &quot;C&quot; &quot;T&quot; &quot;A&quot; &quot;C&quot; &quot;G&quot; &quot;T&quot; &quot;G&quot; &quot;G&quot; ... We can explore what the different arguments do by modifying them. Change pattern = \"\" to pattern = “A.” Can you figure out what happened? # re-run the command without &quot;pattern = &quot;&quot; dengueseq_vector_split2 &lt;- stringr::str_split(dengueseq_vector, pattern = &quot;A&quot;, simplify = FALSE)[[1]] str(dengueseq_vector_split2) ## chr [1:3427] &quot;&quot; &quot;GTTGTT&quot; &quot;GTCT&quot; &quot;CGTGG&quot; &quot;CCG&quot; &quot;C&quot; &quot;&quot; &quot;G&quot; &quot;&quot; &quot;C&quot; &quot;GTTTCG&quot; &quot;&quot; &quot;TCGG&quot; &quot;&quot; ... Run this code (don’t worry what it does). Does this help you see what’s up? options(str = strOptions(vec.len = 10)) str(list(dengueseq_vector_split[1:20], dengueseq_vector_split2[1:10])) ## List of 2 ## $ : chr [1:20] &quot;A&quot; &quot;G&quot; &quot;T&quot; &quot;T&quot; &quot;G&quot; &quot;T&quot; &quot;T&quot; &quot;A&quot; &quot;G&quot; &quot;T&quot; ... ## $ : chr [1:10] &quot;&quot; &quot;GTTGTT&quot; &quot;GTCT&quot; &quot;CGTGG&quot; &quot;CCG&quot; &quot;C&quot; &quot;&quot; &quot;G&quot; &quot;&quot; &quot;C&quot; So, what does the pattern = ... argument do? Something cool which we will explore in the next exercise is that we can do summaries on vectors of nucleotides, like this: table(dengueseq_vector_split) ## dengueseq_vector_split ## A C G T ## 3426 2240 2770 2299 13.2 Saving FASTA files We can save our data as .fasta file for safe keeping write(dengueseq_fasta, file=&quot;dengueseq.fasta&quot;) 13.3 Reading in FASTA files We can read in FASTA files NOTE: this code needs to be updated to have a call to the compbio package itself dengueseq_matrix &lt;- ape::read.dna(file = system.file(&quot;dengueseq.fasta&quot;), format = &quot;fasta&quot;, as.character = TRUE) Note that reading it back in like this results in a change from its original format class(dengueseq_matrix) Now we have a matrix instead of a vector. str() will give us a peak at it {, eval = Fr} str(dengueseq_matrix) Matrices are squares of data - how big is this square? dim(dengueseq_matrix) We have a 1 x 10737 matrix. To print out a certain subsequence of the sequence, we just need to type the name of the vector dengueseq_reload followed by the square brackets [ ] containing the indices for the nucleotides we want to see. For example, the following command prints out the first 50 nucleotides of the DEN-1 Dengue virus genome sequence: dengueseq_matrix[1:50] Note that dengueseq_matrix[1:50] refers to the elements of the vector dengueseq_matrix with indices from 1-50. These elements contain the first 50 nucleotides of the DEN-1 Dengue virus sequence. We can run table() on this table(dengueseq_matrix) "],["appendix-01-getting-access-to-r.html", "Appendix 01: Getting access to R 13.4 Getting Started With R and RStudio", " Appendix 01: Getting access to R 13.4 Getting Started With R and RStudio R is a piece of software that does calculations and makes graphs. RStudio is a GUI (graphical user interface) that acts as a front-end to R Your can use R directly, but most people use a GUI of some kind RStudio has become the most popular GUI The following instructions will lead you click by click through downloading R and RStudio and starting an initial session. If you have trouble with downloading either program go to YouTube and search for something like “Downloading R” or “Installing RStudio” and you should be able to find something helpful, such as “How to Download R for Windows”. 13.4.1 RStudio Cloud TODO: Add RStudio cloud 13.4.2 Getting R onto your own computer To get R on to your computer first go to the CRAN website at https://cran.r-project.org/ (CRAN stands for “comprehensive R Archive Network”). At the top of the screen are three bullet points; select the appropriate one (or click the link below) Download R for Linux Download R for (Mac) OS X Download R for Windows Each page is formatted slightly differently. For a current Mac, click on the top link, which as of 8/16/2018 was “R-3.5.1.pkg” or click this link. If you have an older Mac you might have to scroll down to find your operating system under “Binaries for legacy OS X systems.” For PC select “base” or click this link. When its downloaded, run the installer and accept the defaults. 13.4.3 Getting RStudio onto your computer RStudio is an R interface developed by a company of the same name. RStudio has a number of commercial products, but much of their portfolio is freeware. You can download RStudio from their website www.rstudio.com/ . The download page (www.rstudio.com/products/rstudio/download/) is a bit busy because it shows all of their commercial products; the free version is on the far left side of the table of products. Click on the big green DOWNLOAD button under the column on the left that says “RStudio Desktop Open Source License” (or click on this link ). This will scroll you down to a list of downloads titled “Installers for Supported Platforms.” Windows users can select the top option RStudio 1.1.456 - Windows Vista/7/8/10 and Mac the second option RStudio 1.1.456 - Mac OS X 10.6+ (64-bit). (Versions names are current of 8/16/2018). Run the installer after it downloads and accept the default. RStudio will automatically link up with the most current version of R you have on your computer. Find the RStudio icon on your desktop or search for “RStudio” from your task bar and you’ll be read to go. 13.4.4 Keep R and RStudio current Both R and RStudio undergo regular updates and you will occasionally have to re-download and install one or both of them. In practice I probably do this about every 6 months. "],["getting-started-with-r-itself-or-not.html", "Getting started with R itself (or not) Vocabulary R commands 13.5 Help! 13.6 Other features of RStudio 13.7 Practice (OPTIONAL)", " Getting started with R itself (or not) Vocabulary console script editor / source viewer interactive programming scripts / script files .R files text files / plain text files command execution / execute a command from script editor comments / code comments commenting out / commenting out code stackoverflow.com the rstats hashtag R commands c(…) mean(…) sd(…) ? read.csv(…) This is a walk-through of a very basic R session. It assumes you have successfully installed R and RStudio onto your computer, and nothing else. Most people who use R do not actually use the program itself - they use a GUI (graphical user interface) “front end” that make R a bit easier to use. However, you will probably run into the icon for the underlying R program on your desktop or elsewhere on your computer. It usually looks like this: ADD IMAGE HERE The long string of numbers have to do with the version and whether is 32 or 64 bit (not important for what we do). If you are curious you can open it up and take a look - it actually looks a lot like RStudio, where we will do all our work (or rather, RStudio looks like R). Sometimes when people are getting started with R they will accidentally open R instead of RStudio; if things don’t seem to look or be working the way you think they should, you might be in R, not RStudio 13.4.4.1 R’s console as a scientific calculator You can interact with R’s console similar to a scientific calculator. For example, you can use parentheses to set up mathematical statements like 5*(1+1) ## [1] 10 Note however that you have to be explicit about multiplication. If you try the following it won’t work. 5(1+1) R also has built-in functions that work similar to what you might have used in Excel. For example, in Excel you can calculate the average of a set of numbers by typing “=average(1,2,3)” into a cell. R can do the same thing except The command is “mean” You don’t start with “=” You have to package up the numbers like what is shown below using “c(…)” mean(c(1,2,3)) ## [1] 2 Where “c(…)” packages up the numbers the way the mean() function wants to see them. If you just do the following R will give you an answer, but its the wrong one mean(1,2,3) This is a common issue with R – and many programs, really – it won’t always tell you when somethind didn’t go as planned. This is because it doesn’t know something didn’t go as planned; you have to learn the rules R plays by. 13.4.4.2 Practice: math in the console See if you can reproduce the following results Division 10/3 ## [1] 3.333333 The standard deviation sd(c(5,10,15)) # note the use of &quot;c(...)&quot; ## [1] 5 13.4.4.3 The script editor While you can interact with R directly within the console, the standard way to work in R is to write what are known as scripts. These are computer code instructions written to R in a script file. These are save with the extension .R but area really just a form of plain text file. To work with scripts, what you do is type commands in the script editor, then tell R to excute the command. This can be done several ways. First, you tell RStudio the line of code you want to run by either * Placing the cursor at the end a line of code, OR * Clicking and dragging over the code you want to run in order highlight it. Second, you tell RStudio to run the code by * Clicking the “Run” icon in the upper right hand side of the script editor (a grey box with a green error emerging from it) * pressing the control key (“ctrl)” and then then enter key on the keyboard The code you’ve chosen to run will be sent by RStudio from the script editor over to the console. The console will show you both the code and then the output. You can run several lines of code if you want; the console will run a line, print the output, and then run the next line. First I’ll use the command mean(), and then the command sd() for the standard deviation: mean(c(1,2,3)) ## [1] 2 sd(c(1,2,3)) ## [1] 1 13.4.4.4 Comments One of the reasons we use script files is that we can combine R code with comments that tell us what the R code is doing. Comments are preceded by the hashtag symbol #. Frequently we’ll write code like this: #The mean of 3 numbers mean(c(1,2,3)) If you highlight all of this code (including the comment) and then click on “run,” you’ll see that RStudio sends all of the code over console. ## [1] 2 Comments can also be placed at the end of a line of code mean(c(1,2,3)) #Note the use of c(...) Sometimes we write code and then don’t want R to run it. We can prevent R from executing the code even if its sent to the console by putting a “#” infront of the code. If I run this code, I will get just the mean but not the sd. mean(c(1,2,3)) #sd(c(1,2,3)) Doing this is called commenting out a line of code. 13.5 Help! There are many resource for figuring out R and RStudio, including R’s built in “help” function Q&amp;A websites like stackoverflow.com twitter, using the hashtag #rstats blogs online books and course materials 13.5.1 Getting “help” from R If you are using a function in R you can get info about how it works like this ?mean In RStudio the help screen should appear, probably above your console. If you start reading this help file, though, you don’t have to go far until you start seeing lots of R lingo, like “S3 method,”“na.rm,” “vectors.” Unfortunately, the R help files are usually not written for beginners, and reading help files is a skill you have to acquire. For example, when we load data into R in subsequent lessons we will use a function called “read.csv” Access the help file by typing “?read.csv” into the console and pressing enter. Surprisingly, the function that R give you the help file isn’t what you asked for, but is read.table(). This is a related function to read.csv, but when you’re a beginner thing like this can really throw you off. Kieran Healy as produced a great cheatsheet for reading R’s help pages as part of his forthcoming book. It should be available online at http://socviz.co/appendix.html#a-little-more-about-r 13.5.2 Getting help from the internet The best way to get help for any topic is to just do an internet search like this: “R read.csv.” Usually the first thing on the results list will be the R help file, but the second or third will be a blog post or something else where a usually helpful person has discussed how that function works. Sometimes for very basic R commands like this might not always be productive but its always work a try. For but things related to stats, plotting, and programming there is frequently lots of information. Also try searching YouTube. 13.5.3 Getting help from online forums Often when you do an internet search for an R topic you’ll see results from the website www.stackoverflow.com, or maybe www.crossvalidated.com if its a statistics topic. These are excellent resources and many questions that you may have already have answers on them. Stackoverflow has an internal search function and also suggests potentially relevant posts. Before posting to one of these sites yourself, however, do some research; there is a particular type and format of question that is most likely to get a useful response. Sadly, people new to the site often get “flamed” by impatient pros. 13.5.4 Getting help from twitter Twitter is a surprisingly good place to get information or to find other people knew to R. Its often most useful to ask people for learning resources or general reference, but you can also post direct questions and see if anyone responds, though usually its more advanced users who engage in twitter-based code discussion. A standard tweet might be “Hey #rstats twitter, am knew to #rstats and really stuck on some of the basics. Any suggestions for good resources for someone starting from scratch?” 13.6 Other features of RStudio 13.6.1 Ajusting pane the layout You can adjust the location of each of RStudio 4 window panes, as well as their size. To set the pane layout go to 1. ”Tools” on the top menu 1. ”Global options” 1. “Pane Layout” Use the drop-down menus to set things up. I recommend 1. Lower left: “Console”\" 1. Top right: “Source” 1. Top left: “Plot, Packages, Help Viewer” 1. This will leave the “Environment…” panel in the lower right. 13.6.2 Adjusting size of windows You can clicked on the edge of a pane and adjust its size. For most R work we want the console to be big. For beginners, the “Environment, history, files” panel can be made really small. 13.7 Practice (OPTIONAL) Practice the following operations. Type the directly into the console and execute them. Also write them in a script in the script editor and run them. Square roots sqrt(42) ## [1] 6.480741 The date Some functions in R can be executed within nothing in the parentheses. date() ## [1] &quot;Mon Jul 12 10:01:05 2021&quot; Exponents The ^ is used for exponents 42^2 ## [1] 1764 A series of numbers A colon between two numbers creates a series of numbers. 1:42 ## [1] 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 ## [31] 31 32 33 34 35 36 37 38 39 40 41 42 logs The default for the log() function is the natural log. log(42) ## [1] 3.73767 log10() gives the base-10 log. log10(42) ## [1] 1.623249 exp() raises e to a power exp(3.73767) ## [1] 42.00002 Multiple commands can be nested sqrt(42)^2 log(sqrt(42)^2) exp(log(sqrt(42)^2)) "]]
